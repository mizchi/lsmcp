name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [22.x]
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build
        run: pnpm build
      
      - name: Type check
        run: pnpm typecheck
      
      - name: Lint
        run: pnpm lint
      
      - name: Format check
        run: pnpm format:check
      
      - name: Unit tests
        run: pnpm test:unit
        env:
          CI: true
      
      - name: Integration tests
        run: pnpm test:integration
        timeout-minutes: 15
        env:
          CI: true
      
      - name: Setup Rust (for examples test)
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rust-analyzer
      
      - name: Install MoonBit tools (for examples test)
        run: |
          # Install Moon CLI and MoonBit LSP
          curl -sSL https://cli.moonbitlang.com/install/unix.sh | bash
          echo "$HOME/.moon/bin" >> $GITHUB_PATH
          pnpm add -wD @moonbit/moonbit-lsp
      
      - name: Setup .NET (for F# examples test)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      - name: Install fsautocomplete
        run: dotnet tool install -g fsautocomplete
      
      - name: Check examples
        run: |
          export PATH="$HOME/.dotnet/tools:$PATH"
          pnpm test:examples

  build-and-publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
      
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build
        run: pnpm build
      
      - name: Check if version changed
        id: version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          
          # Check if this version is already published
          if npm view @mizchi/lsmcp@$PACKAGE_VERSION version 2>/dev/null; then
            echo "Version $PACKAGE_VERSION already published"
            echo "should_publish=false" >> $GITHUB_OUTPUT
          else
            echo "Version $PACKAGE_VERSION not published yet"
            echo "should_publish=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Publish to npm
        if: steps.version.outputs.should_publish == 'true'
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}