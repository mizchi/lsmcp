name: CI - Language Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # F# Language Server Test
  fsharp-language:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v5

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Install F# dependencies
        run: |
          dotnet tool install -g fsautocomplete
          # Verify installation
          fsautocomplete --version

      - name: Install Node.js dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build

      - name: Run F# language tests
        run: pnpm vitest run tests/languages/language-tests/fsharp.test.ts
        env:
          CI: true
          TEST_FSHARP: true

  # Rust Language Server Test
  rust-language:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v5

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rust-analyzer

      - name: Install Rust Language Server
        run: |
          # rust-analyzer is included with rustup toolchain
          rust-analyzer --version

      - name: Install Node.js dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build

      - name: Initialize Rust project
        run: |
          cd tests/fixtures/rust
          cargo check || true

      - name: Run Rust language tests
        run: pnpm vitest run tests/languages/language-tests/rust.test.ts
        env:
          CI: true
          TEST_RUST: true

  # TypeScript (tsgo) language test
  tsgo-language:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v5

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"

      - name: Install Node.js dependencies
        run: pnpm install --frozen-lockfile

      - name: Verify TypeScript tools
        run: |
          # tsgo is available via @typescript/native-preview in devDependencies
          npx tsgo --version

      - name: Build
        run: pnpm build

      - name: Run tsgo language tests
        run: pnpm vitest run tests/languages/language-tests/tsgo.test.ts
        env:
          CI: true
          TEST_TSGO: true

  # Python language test
  python-language:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v5

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv and Python Language Servers
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          source ~/.cargo/env
          # Install both Pyright and python-lsp-server
          uv tool install pyright
          uv tool install python-lsp-server[all]
          pyright --version
          pylsp --version

      - name: Install Node.js dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build

      - name: Initialize Python project
        run: |
          cd tests/fixtures/python
          source ~/.cargo/env
          uv sync

      - name: Run Python language tests
        run: pnpm vitest run tests/languages/language-tests/python.test.ts
        env:
          CI: true
          TEST_PYTHON: true

  # MoonBit language test
  moonbit-language:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v5

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"

      - name: Install MoonBit
        run: |
          curl -fsSL https://cli.moonbitlang.com/install/unix.sh | bash
          echo "$HOME/.moon/bin" >> $GITHUB_PATH

      - name: Install Node.js dependencies
        run: pnpm install --frozen-lockfile

      - name: Verify MoonBit tools
        run: |
          # Verify MoonBit CLI
          moon version
          moonc -v
          # Verify MoonBit LSP via npm package
          npx moonbit-lsp --version

      - name: Build
        run: pnpm build

      - name: Run MoonBit language tests
        run: pnpm vitest run tests/languages/language-tests/moonbit.test.ts
        env:
          CI: true
          TEST_MOONBIT: true

  # Haskell language test
  haskell-language:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v5

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"

      - name: Setup Haskell
        uses: haskell-actions/setup@v2
        with:
          ghc-version: "9.4"
          enable-stack: false
          cabal-version: "3.10"

      - name: Cache Haskell dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cabal/packages
            ~/.cabal/store
            ~/.ghcup
          key: ${{ runner.os }}-haskell-${{ hashFiles('tests/fixtures/haskell/**') }}
          restore-keys: |
            ${{ runner.os }}-haskell-

      - name: Install HLS
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh -s -- -y
          source ~/.ghcup/env
          ghcup install hls latest || echo "HLS installation failed"
          haskell-language-server-wrapper --version || echo "HLS not available"

      - name: Install Node.js dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build

      - name: Run Haskell language tests
        run: |
          source ~/.ghcup/env
          pnpm vitest run tests/languages/language-tests/haskell.test.ts
        env:
          CI: true
          TEST_HASKELL: true

  # OCaml language test
  ocaml-language:
    runs-on: ubuntu-22.04  # Use Ubuntu 22.04 which has darcs package
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v5

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"

      - name: Cache opam
        uses: actions/cache@v4
        id: cache-opam
        with:
          path: ~/.opam
          key: ${{ runner.os }}-opam-5.1-${{ hashFiles('tests/fixtures/ocaml/**') }}
          restore-keys: |
            ${{ runner.os }}-opam-5.1-
            ${{ runner.os }}-opam-

      - name: Setup OCaml
        uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: "5.1"
          cache-prefix: "v2"
          dune-cache: true

      - name: Install OCaml LSP
        if: steps.cache-opam.outputs.cache-hit != 'true'
        run: |
          opam install -y ocaml-lsp-server
          eval $(opam env)
          ocamllsp --version

      - name: Verify OCaml LSP
        run: |
          eval $(opam env)
          ocamllsp --version || (echo "OCaml LSP not found, installing..." && opam install -y ocaml-lsp-server)

      - name: Install Node.js dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build

      - name: Run OCaml language tests
        run: |
          eval $(opam env)
          pnpm vitest run tests/languages/language-tests/ocaml.test.ts
        env:
          CI: true
          TEST_OCAML: true
